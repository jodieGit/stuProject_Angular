Angular是什么：
    AngularJS主要用于构建单页面Web应用。它通过开发人员和常见的开发任务之间的抽象级别，使构建交互式的现代Web应用变得更加简单。
    提供了一些高级功能：
        解耦应用逻辑、数据模型和视图；Ajax服务；依赖注入；浏览历史；测试；更多功能。
    AngularJS则通过原生的Model-View-Controller(MVC)功能增强了HTML.

使用Angular功能，必须满足一下几点：
    在HTML中引用angular.js；并在某个DOM元素上明确设置ng-app属性即可（ng-app属性声明所有被包含的内容都属于这个angularJS应用）

Angular跟踪和相应应用变化的机制：
    AngualarJS会记录数据模型所包含的数据在任何特定时间点的值，而不是原始值。当AngualrJS认为某个值可能发生变化时，它会运行自己
    的事件循环来检查这个值是否变“脏”。如果该值从上次事件循环运行之后发生了变化，则该值被认为是“脏”值。
    这个事件循环会调用$digest()循环；
    这个过程被称为“脏检查”；

AngularJS中的特殊声明：
    ng-app:声明所有被它包含的元素都属于AngularJS应用一样，DOM元素上的ng-controller声明所有被它包含的元素都是属于这个控制器。
    $:表示Angular对象

Angular模块：
    angular.module('myApp',[]):AngularJS允许我们使用angular.module()方法来声明模块，这个方法能够接受两个参数，第一个是
   模块的名称，第二个是依赖列表，也就是可以被注入到模块中的对象列表；
    angular.module('myApp'):如果只传递一个参数，就可以用它来引用模块。

Angular模板参数：angular.modele()的参数列表
    name(字符串)：name是模块的名称，字符串变量
    requires(字符串数组)：requires包含了一个字符串变量组成的列表，每个元素都是一个模块名称，本模块依赖于这些模块，依赖需要在本模
        块加载之前由注入器进行预加载。

AngularJS作用域：
    作用域（$scope）是构成AngularJS应用的核心基础。
    1.视图和$scope关系：
        AngularJS启动并生成视图时，会将根ng-app元素同$rootScope进行绑定。$rootScope是所有$scope对象的最上层。
        $scope并不负责处理和操作数据，它只是视图和HTML之间的桥梁
    2.我们可以在AngularJS应用的模板中使用多种标记，包括下面这些：
        指令：将DOM元素增强为可复用的DOM组件的属性或元素
        值绑定：模板语法{{}}可以将表达式绑定到视图上
        过滤器：可以在视图中使用的函数，用来进行格式化
        表单控件：用来检验用户输入的控件
    3.作用域的作用：
        提供观察者以监视数据模型的变化；
        可以将数据模型的变化通知给整个应用，甚至是系统外的组件；
        可以进行嵌套，隔离业务功能和数据；
        给表达式提供运算时所需的执行环境；
    ng-controller指令为这个DOM元素创建了一个新的$scope对象，并将它嵌套在$rootScope中。

    4.$scope的生命周期
        创建：在创建控制器或者指令时，AngularJS会用$indector创建一个新的作用域，并在这个新建
            控制器或指令运行时将作用域传递进去；
        链接：当Angular开始运行时，所有的$scope对象都会附加或者链接到视图中。所有创建$scope
            对象的函数也会将自身附加到视图中。这些作用域将会注册当Angular应用上下文发生变化时
            需要运行的函数。
            这些函数被称为$watch函数。
        更新：当事件循环时，它通过执行在顶层的$scope对象上，每个子作用域都执行自己的脏值检查。
            每个监控函数都会检查变化。如果检测到任意变化，$scope对象就会触发指定的回调函数。
        销毁：当一个$scope在视图中不再需要时，这个作用域将会清理和销毁自己。
            可以使用这个$scope上叫做$destory()的方法来清理这个作用域。

Angulat控制器：是一个函数，用来向视图的作用域中添加额外的功能。我们用它来给作用域对象设置初始状态，
    并添加自定义行为。
    为防止污染全局命名空间。更合理的方式是创建一个模块，然后在模块中创建控制器。
    AngularJS同其他Javascript框架最主要的一个区别就是，控制器并不适合在执行DOM操作、格式化或
    数据操作，以及除存储数据模型之外的状态维护操作。它只是视图和$scope之间的桥梁。

Angular表达式：用{{}}符号将一个变量绑定到$scope上的写法本质上及时一个表达式：{{expression}}.
    表达式和eval(javascript)非常相似，但是由于表达式由AngularJS来处理，他们有以下显著不同的特质：
    1.所有的表达式都在其所属的作用域内部执行，并有访问本地$scope的权限；
    2.如果表达式发生了TyprError和ReferenceErro并不会抛出异常；
    3.不允许使用任何流程控制功能（条件控制）
    4.可以接受过滤器和过滤器链。

    解析AngularJS表达式
        尽管AngularJS会在运行$digest循环的过程中自动解析表达式，但有时手动解析表达式也是非常有用的。
        AngualrJS通过$parse这个内部服务来进行表达式的运算，这个服务器能够访问当前所处的作用域。这个
        过程允许我们访问定义在$scope上的原始Javascript数据和函数。
        将$parse服务注入到控制器中，然后调用它可以实现手动解析表达式。
    插值字符串：
        要在字符串模板中做插值操作，需要在你的对象中注入$interpolate服务，eg:
        angular.module('myApp',[])
            .controller('MyController',function($scope,$interpolate){
                //我们同事有用访问$scope和$interpolate服务的权限
            })

        $interpolate服务是一个可以接受三个参数的函数，其中第一个参数是必需的。
        text(字符串):一个包含字符插值标记的字符串
        mustHaveExpression(布尔值)：如果将这个参数设为true,当传入的字符串中不含有表达式会返回
            null.
        trustedContext(字符串)：AngularJS会对已经进行过字符插值操作的字符串通过
            $sec.getTrusted()方法进行严格的上下文转义。

        $interpolate服务器返回一个参数，用来在特定的上下文中运算表达式。

        如果需要在文本中使用不同于{{}}的符号来标识表达式的开始和结束，可以在$inter polateProvider中
        配置。
        用startSymbol()方法可以修改标识开始的符号。这个方法接受一个参数。
        value(字符串)：开始符号的值
        用endSymbol()方法可以修改标识结束的符号。这个方法也接受一个参数。
        value(字符串)：结束符号的值
        如果需要秀爱这两个符号的设置，需要在创建新模板时将$interpolateProvider注入进去。

Angular过滤器：过滤器用来格式化需要展示给用户的数据。
    在HTML中的模板绑定符号{{}}内通过|符号来调用过滤器。
    eg1:将字符串转换为大写:{{name|uppercase}}
    //js中通过$filter来调用过滤器
    eg2:app.controller('DemoController',['$scope','$filter',function(){
        $scope.name=$filter('lowercase')('Ari');
    }]);
    //以HTML的形式使用过滤器，如果需要传递参数给过滤器，只要在过滤器名字后面加冒号即可。如果有多个参数，可以在每个参数后面都
    加上冒号。
    {{12.3456:number:2}}//限制小数点后面的位数。

    1.currency:可以将一个数值格式化为货币格式。允许我们自己设置货币符号。默认情况下会采用客户端所处区域的货币符号。
    2.date:date过滤器可以将日期格式化为需要的格式。AngularJS中内置了几种日期格式。如果没有使用任何格式，则默认会采用
      mediumDate格式。下面是内置的支持本地化的日期格式：
      {{today|date:'medium'}} //Aug 09,2013 12:09:02 PM
      {{today|date:'short'}} //8/9/1312:09PM
      {{today|date:'fullDate'}}  //Thurdat,August 09,2013
      {{today|date:longDate}}  //August 09,2013
      {{today|date:mediumDate}}  //Aug 09,2013
      {{today|date:shortDate}}  //8/9/13
      {{today|date:mediumTime}}  //12:09:02 PM
      {{today|date:shortTime}} //12:09:02 PM

      年份格式化：
      四位年份：{{today|date:'yyyy'}}  //2014
      两位年份：{{today|date:'yy'}    //14
      一位年份：{{today|date:'y'}}    //2014

       月份格式化
      英文月份：{{ today | date:'MMMM' }} <!-- August -->
      英文月份简写：{{ today | date:'MMM' }} <!-- Aug -->
      数字月份：{{ today |date:'MM' }} <!-- 08 -->
      一年中的第几个月份：{{ today |date:'M' }} <!-- 8 -->
       日期格式化
      数字日期：{{ today|date:'dd' }} <!-- 09 -->
      一个月中的第几天：{{ today | date:'d' }} <!-- 9 -->
      英文星期：{{ today | date:'EEEE' }} <!-- Thursday -->
      英文星期简写：{{ today | date:'EEE' }} <!-- Thu -->
       小时格式化
      24小时制数字小时：{{today|date:'HH'}} <!--00-->
      一天中的第几个小时：{{today|date:'H'}} <!--0-->
      12小时制数字小时：{{today|date:'hh'}} <!--12-->
      上午或下午的第几个小时：{{today|date:'h'}} <!--12-->
       分钟格式化
      数字分钟数：{{ today | date:'mm' }} <!-- 09 -->
      一个小时中的第几分钟：{{ today | date:'m' }} <!-- 9 -->
       秒数格式化
      数字秒数：{{ today | date:'ss' }} <!-- 02 -->
      一分钟内的第几秒：{{ today | date:'s' }} <!-- 2 -->
      毫秒数：{{ today | date:'.sss' }} <!-- .995 -->
       字符格式化
      上下午标识：{{ today | date:'a' }} <!-- AM -->
      四位时区标识：{{ today | date:'Z' }} <!--- 0700 -->
      下面是一些自定义日期格式的示例：
      {{ today | date:'MMMd, y' }} <!-- Aug9, 2013 -->
      {{ today | date:'EEEE, d, M' }} <!-- Thursday, 9, 8-->
      {{ today | date:'hh:mm:ss.sss' }} <!-- 12:09:02.995 -->


    3.filter:可以从指定数组中选择一个子集，并将其生成一个新数组返回。这个过滤器通常用来过滤需要进行展示的元素。

        这个过滤器的第一个参数可以是字符串、对象或是一个从数组中选择元素的函数。
        3-1：字符串：返回所有包含这个字符串的元素。如果想返回不包含字符串的元素，可以在参数前加！符号。
        3-2：对象：AngualrJS会将待过滤对象的属性同这个对象的同名属性进行比较，如果属性值是字符串就会判断是否包含该字符串。
            如果我们需要对全部属性都进行对比，可以将$当做键值。
        3-3：函数：对每个元素都执行这个函数，返回非假值得元素会出现在新的数组中并返回。
        eg:{{ ['Ari','Lerner','Likes','To','Eat','Pizza'] | filter:'e' }}

        第二个参数可以是以下三中情况之一：
        3-1.true:用angular.equals(expected,actual)对两个值进行严格比较
        3-2.false:进行区分大小写的字符串比较。
        3-3.函数：运行这个函数，如果返回真值就接受这个元素

    4.json:json过滤器可以将一个JSON或JavaScript对象转换为字符串。这种转换对调试非常有帮助。

    5.limitTo:该过滤器会根据传入的参数生成一个新的数组或字符串，新的数组或字符串的长度取决于传入的参数，通过传入的参数的正
    负值来控制前面还是从后面开始截取。



